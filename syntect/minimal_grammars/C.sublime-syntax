%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: C
file_extensions:
  - c
  - h
first_line_match: "-[*]-( Mode:)? C -[*]-"
scope: source.c
contexts:
  main:
    - include: preprocessor-rule-enabled
    - include: preprocessor-rule-disabled
    - include: preprocessor-rule-other
    - include: comments
    - include: scope:source.c.platform
    - match: \b(break|case|continue|default|do|else|for|goto|if|_Pragma|return|switch|while)\b
      scope: keyword.control.c
    - match: \b(asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|_Imaginary|int|long|short|signed|struct|typedef|union|unsigned|void)\b
      scope: storage.type.c
    - match: \b(const|extern|register|restrict|static|volatile|inline)\b
      scope: storage.modifier.c
    - match: '\bk[A-Z]\w*\b'
      comment: common C constant naming idiom -- kConstantVariable
      scope: constant.other.variable.mac-classic.c
    - match: '\bg[A-Z]\w*\b'
      scope: variable.other.readwrite.global.mac-classic.c
    - match: '\bs[A-Z]\w*\b'
      scope: variable.other.readwrite.static.mac-classic.c
    - match: \b(NULL|true|false|TRUE|FALSE)\b
      scope: constant.language.c
    - include: sizeof
    - match: |-
        (?x)\b
        (  (?i:
              0x ( [0-9A-Fa-f]+ ( ' [0-9A-Fa-f]+ )* )?  # Hexadecimal
           |  0b ( [0-1]+       ( ' [0-1]+ )* )?        # Binary
           |  0  ( [0-7]+       ( ' [0-7]+ )* )         # Octal
           |     ( [0-9]+       ( ' [0-9]+ )* )         # Decimal
           )
           ( ([uUfF] | u?ll? | U?LL?)\b | (?<inc>') | \b )
        |  ( [0-9]+ ( ' [0-9]+ )* )?
           (?i:
              \. ( [0-9]+ ( ' [0-9]+ )* ) E(\+|-)? ( [0-9]+ ( ' [0-9]+ )* )
           |  \. ( [0-9]+ ( ' [0-9]+ )* )
           |  E(\+|-)? ( [0-9]+ ( ' [0-9]+ )* )
           )
           ( (?<inc>') | \b )
        )
      scope: constant.numeric.c
      captures:
        inc: invalid.illegal.digit-separator-should-not-be-last.c++
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.c
      push:
        - meta_scope: string.quoted.double.c
        - match: '"'
          captures:
            0: punctuation.definition.string.end.c
          pop: true
        - include: string_escaped_char
        - include: string_placeholder
    - match: "'"
      captures:
        0: punctuation.definition.string.begin.c
      push:
        - meta_scope: string.quoted.single.c
        - match: "'"
          captures:
            0: punctuation.definition.string.end.c
          pop: true
        - include: string_escaped_char
    - match: |-
        (?x)
        	^\s*\#\s*(define)\s+             # define
        	((?<id>[a-zA-Z_][a-zA-Z0-9_]*))  # macro name
        	(?:                              # and optionally:
        	    (\()                         # an open parenthesis
        	        (
        	            \s* \g<id> \s*       # first argument
        	            ((,) \s* \g<id> \s*)*  # additional arguments
        	            (?:\.\.\.)?          # varargs ellipsis?
        	        )
        	    (\))                         # a close parenthesis
        	)?
      captures:
        1: keyword.control.import.define.c
        2: entity.name.function.preprocessor.c
        4: punctuation.definition.parameters.begin.c
        5: variable.parameter.preprocessor.c
        7: punctuation.separator.parameters.c
        8: punctuation.definition.parameters.end.c
      push:
        - meta_scope: meta.preprocessor.macro.c
        - match: (?=(?://|/\*))|$
          pop: true
        - match: (?>\\\s*\n)
          scope: punctuation.separator.continuation.c
        - include: $top_level_main
    - match: ^\s*#\s*(error|warning)\b
      captures:
        1: keyword.control.import.error.c
      push:
        - meta_scope: meta.preprocessor.diagnostic.c
        - match: $
          captures:
            1: keyword.control.import.error.c
          pop: true
        - match: (?>\\\s*\n)
          scope: punctuation.separator.continuation.c
    - match: ^\s*#\s*(include|import)\b
      captures:
        1: keyword.control.import.include.c
      push:
        - meta_scope: meta.preprocessor.c.include
        - match: (?=(?://|/\*))|$
          captures:
            1: keyword.control.import.include.c
          pop: true
        - match: (?>\\\s*\n)
          scope: punctuation.separator.continuation.c
        - match: '"'
          captures:
            0: punctuation.definition.string.begin.c
          push:
            - meta_scope: string.quoted.double.include.c
            - match: '"'
              captures:
                0: punctuation.definition.string.end.c
              pop: true
        - match: <
          captures:
            0: punctuation.definition.string.begin.c
          push:
            - meta_scope: string.quoted.other.lt-gt.include.c
            - match: ">"
              captures:
                0: punctuation.definition.string.end.c
              pop: true
    - include: pragma-mark
    - match: ^\s*#\s*(define|defined|elif|else|if|ifdef|ifndef|line|pragma|undef)\b
      captures:
        1: keyword.control.import.c
      push:
        - meta_scope: meta.preprocessor.c
        - match: (?=(?://|/\*))|$
          captures:
            1: keyword.control.import.c
          pop: true
        - match: (?>\\\s*\n)
          scope: punctuation.separator.continuation.c
    - match: '\b([a-z0-9_]+_t)\b'
      comment: Reserved POSIX types
      scope: support.type.posix-reserved.c
    - include: block
    - match: |-
        (?x)
        (?:  ^                                 # begin-of-line
          |
             (?: (?= \s )           (?<!else|new|return) (?<=\w)      #  or word + space before name
               | (?= \s*[A-Za-z_] ) (?<!&&)       (?<=[*&>])   #  or type modifier before name
             )
        )
        (\s*) (?!(while|for|do|if|else|switch|catch|enumerate|return|sizeof|[cr]?iterate|(?:::)?new|(?:::)?delete)\s*\()
        (
        	(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++ |                  # actual name
        	(?: (?<=operator) (?: [-*&<>=+!]+ | \(\) | \[\] ) )  # if it is a C++ operator
        )
         \s*(?=\()
      captures:
        1: punctuation.whitespace.function.leading.c
        3: entity.name.function.c
        4: punctuation.definition.parameters.c
      push:
        - meta_scope: meta.function.c
        - match: '(?<=\})|(?=#)|(;)'
          pop: true
        - include: comments
        - include: parens
        - match: \b(const|final|override|noexcept)\b
          scope: storage.modifier.$1.c++
        - include: block
  access:
    - match: '(\.|\->)(?:\s*(template)\s+)?([a-zA-Z_][a-zA-Z_0-9]*)\b(?!\s*\()'
      captures:
        1: punctuation.separator.variable-access.c
        2: storage.modifier.template.c++
        3: variable.other.dot-access.c
  block:
    - match: '\{'
      captures:
        0: punctuation.section.block.begin.c
      push:
        - meta_scope: meta.block.c
        - match: '\}'
          captures:
            0: punctuation.section.block.end.c
          pop: true
        - include: block_innards
  block_innards:
    - include: preprocessor-rule-enabled-block
    - include: preprocessor-rule-disabled-block
    - include: preprocessor-rule-other-block
    - include: sizeof
    - include: access
    - include: scope:source.c.platform#functions
    - include: c_function_call
    - match: |-
        (?x)
                (?x)
        (?:
             (?: (?= \s )           (?<!else|new|return) (?<=\w)\s+      #  or word + space before name
             )
        )
        (
        	(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++    |              # actual name
        	(?: (?<=operator) (?: [-*&<>=+!]+ | \(\) | \[\] ) )?  # if it is a C++ operator
        )
         \s*(\()
      scope: meta.initialization.c
      captures:
        1: variable.other.c
        2: punctuation.definition.parameters.c
    - include: block
    - include: $top_level_main
  c_function_call:
    - match: |-
        (?x) (?: (?= \s )  (?:(?<=else|new|return) | (?<!\w)) (\s+))?
        (\b
        	(?!(while|for|do|if|else|switch|catch|enumerate|return|sizeof|[cr]?iterate|(?:::)?new|(?:::)?delete)\s*\()(?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\b | :: )++                  # actual name
        )
         \s*(\()
      scope: meta.function-call.c
      captures:
        1: punctuation.whitespace.function-call.leading.c
        2: support.function.any-method.c
        3: punctuation.definition.parameters.c
  comments:
    - match: ^/\* =(\s*.*?)\s*= \*/$\n?
      scope: comment.block.c
      captures:
        1: meta.toc-list.banner.block.c
    - match: /\*
      captures:
        0: punctuation.definition.comment.begin.c
      push:
        - meta_scope: comment.block.c
        - match: \*/
          captures:
            0: punctuation.definition.comment.end.c
          pop: true
    - match: \*/.*\n
      scope: invalid.illegal.stray-comment-end.c
    - match: ^// =(\s*.*?)\s*=\s*$\n?
      scope: comment.line.banner.c++
      captures:
        1: meta.toc-list.banner.line.c
    - match: '(^[ \t]+)?(?=//)'
      captures:
        1: punctuation.whitespace.comment.leading.c++
      push:
        - match: (?!\G)
          pop: true
        - match: //
          captures:
            0: punctuation.definition.comment.c++
          push:
            - meta_scope: comment.line.double-slash.c++
            - match: \n
              pop: true
            - match: (?>\\\s*\n)
              scope: punctuation.separator.continuation.c++
  disabled:
    - match: ^\s*#\s*if(n?def)?\b.*$
      comment: eat nested preprocessor if(def)s
      push:
        - match: ^\s*#\s*endif\b
          pop: true
        - include: disabled
        - include: pragma-mark
  parens:
    - match: \(
      captures:
        0: punctuation.section.parens.begin.c
      push:
        - meta_scope: meta.parens.c
        - match: \)
          captures:
            0: punctuation.section.parens.end.c
          pop: true
        - include: $top_level_main
  pragma-mark:
    - match: ^\s*(#\s*(pragma\s+mark)\s+(.*))
      scope: meta.section
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.pragma.c
        3: meta.toc-list.pragma-mark.c
  preprocessor-rule-disabled:
    - match: ^\s*(#(if)\s+(0)\b).*
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.if.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*(endif)\b)
          captures:
            1: meta.preprocessor.c
            2: keyword.control.import.if.c
            3: constant.numeric.preprocessor.c
          pop: true
        - match: ^\s*(#\s*(else)\b)
          captures:
            1: meta.preprocessor.c
            2: keyword.control.import.else.c
          push:
            - match: (?=^\s*#\s*endif\b)
              captures:
                1: meta.preprocessor.c
                2: keyword.control.import.else.c
              pop: true
            - include: $top_level_main
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: disabled
            - include: pragma-mark
  preprocessor-rule-disabled-block:
    - match: ^\s*(#(if)\s+(0)\b).*
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.if.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*(endif)\b)
          captures:
            1: meta.preprocessor.c
            2: keyword.control.import.if.c
            3: constant.numeric.preprocessor.c
          pop: true
        - match: ^\s*(#\s*(else)\b)
          captures:
            1: meta.preprocessor.c
            2: keyword.control.import.else.c
          push:
            - match: (?=^\s*#\s*endif\b)
              captures:
                1: meta.preprocessor.c
                2: keyword.control.import.else.c
              pop: true
            - include: block_innards
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.in-block
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: disabled
            - include: pragma-mark
  preprocessor-rule-enabled:
    - match: ^\s*(#(if)\s+(0*1)\b)
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.if.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*(endif)\b)
          captures:
            1: meta.preprocessor.c
            2: keyword.control.import.if.c
            3: constant.numeric.preprocessor.c
          pop: true
        - match: ^\s*(#\s*(else)\b).*
          captures:
            1: meta.preprocessor.c
            2: keyword.control.import.else.c
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch
            - match: (?=^\s*#\s*endif\b)
              captures:
                1: meta.preprocessor.c
                2: keyword.control.import.else.c
              pop: true
            - include: disabled
            - include: pragma-mark
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: $top_level_main
  preprocessor-rule-enabled-block:
    - match: ^\s*(#(if)\s+(0*1)\b)
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.if.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*(endif)\b)
          captures:
            1: meta.preprocessor.c
            2: keyword.control.import.if.c
            3: constant.numeric.preprocessor.c
          pop: true
        - match: ^\s*(#\s*(else)\b).*
          captures:
            1: meta.preprocessor.c
            2: keyword.control.import.else.c
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.in-block
            - match: (?=^\s*#\s*endif\b)
              captures:
                1: meta.preprocessor.c
                2: keyword.control.import.else.c
              pop: true
            - include: disabled
            - include: pragma-mark
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: block_innards
  preprocessor-rule-other:
    - match: ^\s*(#\s*(if(n?def)?)\b.*?(?:(?=(?://|/\*))|$))
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
      push:
        - match: ^\s*(#\s*(endif)\b)
          captures:
            1: meta.preprocessor.c
            2: keyword.control.import.c
          pop: true
        - include: $top_level_main
  preprocessor-rule-other-block:
    - match: ^\s*(#\s*(if(n?def)?)\b.*?(?:(?=(?://|/\*))|$))
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
      push:
        - match: ^\s*(#\s*(endif)\b)
          captures:
            1: meta.preprocessor.c
            2: keyword.control.import.c
          pop: true
        - include: block_innards
  sizeof:
    - match: \b(sizeof)\b
      scope: keyword.operator.sizeof.c
  string_escaped_char:
    - match: '\\(\\|[abefnprtv''"?]|[0-3]\d{0,2}|[4-7]\d?|x[a-fA-F0-9]{0,2}|u[a-fA-F0-9]{0,4}|U[a-fA-F0-9]{0,8})'
      scope: constant.character.escape.c
    - match: \\.
      scope: invalid.illegal.unknown-escape.c
  string_placeholder:
    - match: |-
        (?x)%
        	(\d+\$)?                             # field (argument #)
        	[#0\- +']*                           # flags
        	[,;:_]?                              # separator character (AltiVec)
        	((-?\d+)|\*(-?\d+\$)?)?              # minimum field width
        	(\.((-?\d+)|\*(-?\d+\$)?)?)?         # precision
        	(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier
        	[diouxXDOUeEfFgGaACcSspn%]           # conversion type
      scope: constant.other.placeholder.c
