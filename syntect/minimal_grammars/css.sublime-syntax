%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: CSS
file_extensions:
  - css
  - css.erb
first_line_match: |-
  (?xi)
  	# Emacs modeline
  	-\*-(?:\s*(?=[^:;\s]+\s*-\*-)|(?:.*?[;\s]|(?<=-\*-))mode\s*:\s*)
  	  css
  	(?=[\s;]|(?<![-*])-\*-).*?-\*-
  	|
  	# Vim modeline
  	(?:(?:\s|^)vi(?:m[<=>]?\d+|m)?|\sex)(?=:(?=\s*set?\s[^\n:]+:)|:(?!\s*set?\s))(?:(?:\s|\s*:\s*)\w*(?:\s*=(?:[^\n\\\s]|\\.)*)?)*[\s:](?:filetype|ft|syntax)\s*=
  	  css
  	(?=\s|:|$)
scope: source.css
contexts:
  main:
    - include: comment-block
    - include: escapes
    - include: combinators
    - include: selector
    - include: at-rules
    - include: rule-list
  at-rules:
    - match: \A(?:\xEF\xBB\xBF)?(?i:(?=\s*@charset\b))
      push:
        - meta_scope: meta.at-rule.charset.css
        - match: ;|(?=$)
          captures:
            0: punctuation.terminator.rule.css
          pop: true
        - match: |-
            (?x)        # Possible errors:
            \G
            ((?!@charset)@\w+)   # Not lowercase (@charset is case-sensitive)
            |
            \G(\s+)             # Preceding whitespace
            |
            (@charset\S[^;]*)    # No whitespace after @charset
            |
            (?<=@charset)         # Before quoted charset name
            (\x20{2,}|\t+)      # More than one space used, or a tab
            |
            (?<=@charset\x20)    # Beginning of charset name
            ([^";]+)              # Not double-quoted
            |
            ("[^"]+$)             # Unclosed quote
            |
            (?<=")                # After charset name
            ([^;]+)               # Unexpected junk instead of semicolon
          captures:
            1: invalid.illegal.not-lowercase.charset.css
            2: invalid.illegal.leading-whitespace.charset.css
            3: invalid.illegal.no-whitespace.charset.css
            4: invalid.illegal.whitespace.charset.css
            5: invalid.illegal.not-double-quoted.charset.css
            6: invalid.illegal.unclosed-string.charset.css
            7: invalid.illegal.unexpected-characters.charset.css
        - match: ((@)charset)(?=\s)
          captures:
            1: keyword.control.at-rule.charset.css
            2: punctuation.definition.keyword.css
        - match: '"'
          captures:
            0: punctuation.definition.string.begin.css
          push:
            - meta_scope: string.quoted.double.css
            - match: '"|$'
              captures:
                0: punctuation.definition.string.end.css
              pop: true
            - match: '(?:\G|^)(?=(?:[^"])+$)'
              push:
                - meta_scope: invalid.illegal.unclosed.string.css
                - match: $
                  pop: true
    - match: '(?i)((@)import)(?:\s+|$|(?=[''"]|/\*))'
      captures:
        1: keyword.control.at-rule.import.css
        2: punctuation.definition.keyword.css
      push:
        - meta_scope: meta.at-rule.import.css
        - match: ;
          captures:
            0: punctuation.terminator.rule.css
          pop: true
        - match: \G\s*(?=/\*)
          push:
            - match: (?<=\*/)\s*
              pop: true
            - include: comment-block
        - include: string
        - include: url
        - include: media-query-list
    - match: '(?i)((@)font-face)(?=\s*|{|/\*|$)'
      captures:
        1: keyword.control.at-rule.font-face.css
        2: punctuation.definition.keyword.css
      push:
        - meta_scope: meta.at-rule.font-face.css
        - match: (?!\G)
          pop: true
        - include: comment-block
        - include: escapes
        - include: rule-list
    - match: '(?i)(@)page(?=[\s:{]|/\*|$)'
      captures:
        0: keyword.control.at-rule.page.css
        1: punctuation.definition.keyword.css
      push:
        - meta_scope: meta.at-rule.page.css
        - match: '(?=\s*($|[:{;]))'
          captures:
            0: keyword.control.at-rule.page.css
            1: punctuation.definition.keyword.css
          pop: true
        - include: rule-list
    - match: (?i)(?=@media(\s|\(|/\*|$))
      push:
        - match: '(?<=})(?!\G)'
          pop: true
        - match: (?i)\G(@)media
          captures:
            0: keyword.control.at-rule.media.css
            1: punctuation.definition.keyword.css
          push:
            - meta_scope: meta.at-rule.media.header.css
            - match: '(?=\s*[{;])'
              pop: true
            - include: media-query-list
        - match: "{"
          captures:
            0: punctuation.section.media.begin.bracket.curly.css
          push:
            - meta_scope: meta.at-rule.media.body.css
            - match: "}"
              captures:
                0: punctuation.section.media.end.bracket.curly.css
              pop: true
            - include: main
    - match: '(?i)(?=@counter-style([\s''"{;]|/\*|$))'
      push:
        - match: '(?<=})(?!\G)'
          pop: true
        - match: (?i)\G(@)counter-style
          captures:
            0: keyword.control.at-rule.counter-style.css
            1: punctuation.definition.keyword.css
          push:
            - meta_scope: meta.at-rule.counter-style.header.css
            - match: '(?=\s*{)'
              pop: true
            - include: comment-block
            - include: escapes
            - match: |-
                (?x)
                (?:[-a-zA-Z_]    | [^\x00-\x7F])     # First letter
                (?:[-a-zA-Z0-9_] | [^\x00-\x7F]      # Remainder of identifier
                  |\\(?:[0-9a-fA-F]{1,6}|.)
                )*
              scope: variable.parameter.style-name.css
              captures:
        - match: "{"
          captures:
            0: punctuation.section.property-list.begin.bracket.curly.css
          push:
            - meta_scope: meta.at-rule.counter-style.body.css
            - match: "}"
              captures:
                0: punctuation.section.property-list.end.bracket.curly.css
              pop: true
            - include: comment-block
            - include: escapes
            - include: rule-list-innards
    - match: '(?i)(?=@document([\s''"{;]|/\*|$))'
      push:
        - match: '(?<=})(?!\G)'
          pop: true
        - match: (?i)\G(@)document
          captures:
            0: keyword.control.at-rule.document.css
            1: punctuation.definition.keyword.css
          push:
            - meta_scope: meta.at-rule.document.header.css
            - match: '(?=\s*[{;])'
              pop: true
            - match: '(?i)(?<![\w-])(url-prefix|domain|regexp)(\()'
              captures:
                1: support.function.document-rule.css
                2: punctuation.section.function.begin.bracket.round.css
              push:
                - meta_scope: meta.function.document-rule.css
                - match: \)
                  captures:
                    0: punctuation.section.function.end.bracket.round.css
                  pop: true
                - include: string
                - include: comment-block
                - include: escapes
                - match: '[^''")\s]+'
                  scope: variable.parameter.document-rule.css
            - include: url
            - include: commas
            - include: comment-block
            - include: escapes
        - match: "{"
          captures:
            0: punctuation.section.document.begin.bracket.curly.css
          push:
            - meta_scope: meta.at-rule.document.body.css
            - match: "}"
              captures:
                0: punctuation.section.document.end.bracket.curly.css
              pop: true
            - include: main
    - match: '(?i)(?=@(?:-(?:webkit|moz|o|ms)-)?keyframes([\s''"{;]|/\*|$))'
      push:
        - match: '(?<=})(?!\G)'
          pop: true
        - match: (?i)\G(@)(?:-(?:webkit|moz|o|ms)-)?keyframes
          captures:
            0: keyword.control.at-rule.keyframes.css
            1: punctuation.definition.keyword.css
          push:
            - meta_scope: meta.at-rule.keyframes.header.css
            - match: '(?=\s*{)'
              pop: true
            - include: comment-block
            - include: escapes
            - match: |-
                (?x)
                (?:[-a-zA-Z_]    | [^\x00-\x7F])     # First letter
                (?:[-a-zA-Z0-9_] | [^\x00-\x7F]      # Remainder of identifier
                  |\\(?:[0-9a-fA-F]{1,6}|.)
                )*
              scope: variable.parameter.keyframe-list.css
              captures:
        - match: "{"
          captures:
            0: punctuation.section.keyframes.begin.bracket.curly.css
          push:
            - meta_scope: meta.at-rule.keyframes.body.css
            - match: "}"
              captures:
                0: punctuation.section.keyframes.end.bracket.curly.css
              pop: true
            - include: comment-block
            - include: escapes
            - match: |-
                (?xi)
                (?<![\w-]) (from|to) (?![\w-])         # Keywords for 0% | 100%
                |
                ([-+]?(?:\d+(?:\.\d+)?|\.\d+)%)     # Percentile value
              captures:
                1: entity.other.keyframe-offset.css
                2: entity.other.keyframe-offset.percentage.css
            - include: rule-list
    - match: (?i)(?=@supports(\s|\(|/\*|$))
      push:
        - match: '(?<=})(?!\G)|(?=;)'
          pop: true
        - match: (?i)\G(@)supports
          captures:
            0: keyword.control.at-rule.supports.css
            1: punctuation.definition.keyword.css
          push:
            - meta_scope: meta.at-rule.supports.header.css
            - match: '(?=\s*[{;])'
              pop: true
            - include: feature-query-operators
            - include: feature-query
            - include: comment-block
            - include: escapes
        - match: "{"
          captures:
            0: punctuation.section.supports.begin.bracket.curly.css
          push:
            - meta_scope: meta.at-rule.supports.body.css
            - match: "}"
              captures:
                0: punctuation.section.supports.end.bracket.curly.css
              pop: true
            - include: main
    - match: '(?i)((@)viewport)(?=[\s''"{;]|/\*|$)'
      captures:
        1: keyword.control.at-rule.viewport.css
        2: punctuation.definition.keyword.css
      push:
        - meta_scope: meta.at-rule.viewport.css
        - match: '(?=\s*[@{;])'
          pop: true
        - include: comment-block
        - include: escapes
    - match: '(?i)((@)font-feature-values)(?=[\s''"{;]|/\*|$)\s*'
      captures:
        1: keyword.control.at-rule.font-feature-values.css
        2: punctuation.definition.keyword.css
      push:
        - meta_scope: meta.at-rule.font-features.css
        - meta_content_scope: variable.parameter.font-name.css
        - match: '(?=\s*[@{;])'
          pop: true
        - include: comment-block
        - include: escapes
    - include: font-features
    - match: '(?i)((@)namespace)(?=[\s''";]|/\*|$)'
      captures:
        1: keyword.control.at-rule.namespace.css
        2: punctuation.definition.keyword.css
      push:
        - meta_scope: meta.at-rule.namespace.css
        - match: ";|(?=[@{])"
          captures:
            0: punctuation.terminator.rule.css
          pop: true
        - include: url
        - match: |-
            (?xi)
            (?:\G|^|(?<=\s))
            (?=
              (?<=\s|^)                             # Starts with whitespace
              (?:[-a-zA-Z_]|[^\x00-\x7F])          # Then a valid identifier character
              |
              \s*                                   # Possible adjoining whitespace
              /\*(?:[^*]|\*[^/])*\*/              # Injected comment
            )
            (.*?)                                    # Grouped to embed #comment-block
            (
              (?:[-a-zA-Z_]    | [^\x00-\x7F])     # First letter
              (?:[-a-zA-Z0-9_] | [^\x00-\x7F]      # Remainder of identifier
                |\\(?:[0-9a-fA-F]{1,6}|.)
              )*
            )
          captures:
            2: entity.name.function.namespace-prefix.css
        - include: comment-block
        - include: escapes
        - include: string
    - match: '(?i)(?=@[\w-]+[^;]+;s*$)'
      push:
        - match: (?<=;)(?!\G)
          pop: true
        - match: '(?i)\G(@)[\w-]+'
          captures:
            0: keyword.control.at-rule.css
            1: punctuation.definition.keyword.css
          push:
            - meta_scope: meta.at-rule.header.css
            - match: ;
              captures:
                0: punctuation.terminator.rule.css
              pop: true
    - match: '(?i)(?=@[\w-]+(\s|\(|{|/\*|$))'
      push:
        - match: '(?<=})(?!\G)'
          pop: true
        - match: '(?i)\G(@)[\w-]+'
          captures:
            0: keyword.control.at-rule.css
            1: punctuation.definition.keyword.css
          push:
            - meta_scope: meta.at-rule.header.css
            - match: '(?=\s*[{;])'
              pop: true
        - match: "{"
          captures:
            0: punctuation.section.begin.bracket.curly.css
          push:
            - meta_scope: meta.at-rule.body.css
            - match: "}"
              captures:
                0: punctuation.section.end.bracket.curly.css
              pop: true
            - include: main
  color-keywords:
    - match: '(?i)(?<![\w-])(aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow)(?![\w-])'
      scope: support.constant.color.w3c-standard-color-name.css
    - match: |-
        (?xi) (?<![\w-])
        (aliceblue|antiquewhite|aquamarine|azure|beige|bisque|blanchedalmond|blueviolet|brown|burlywood
        |cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan
        |darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange
        |darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise
        |darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen
        |gainsboro|ghostwhite|gold|goldenrod|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki
        |lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow
        |lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray
        |lightslategrey|lightsteelblue|lightyellow|limegreen|linen|magenta|mediumaquamarine|mediumblue
        |mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise
        |mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|oldlace|olivedrab|orangered
        |orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum
        |powderblue|rebeccapurple|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell
        |sienna|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|thistle|tomato
        |transparent|turquoise|violet|wheat|whitesmoke|yellowgreen)
        (?![\w-])
      scope: support.constant.color.w3c-extended-color-name.css
    - match: '(?i)(?<![\w-])currentColor(?![\w-])'
      scope: support.constant.color.current.css
    - match: |-
        (?xi) (?<![\w-])
        (ActiveBorder|ActiveCaption|AppWorkspace|Background|ButtonFace|ButtonHighlight|ButtonShadow
        |ButtonText|CaptionText|GrayText|Highlight|HighlightText|InactiveBorder|InactiveCaption
        |InactiveCaptionText|InfoBackground|InfoText|Menu|MenuText|Scrollbar|ThreeDDarkShadow
        |ThreeDFace|ThreeDHighlight|ThreeDLightShadow|ThreeDShadow|Window|WindowFrame|WindowText)
        (?![\w-])
      scope: invalid.deprecated.color.system.css
  combinators:
    - match: /deep/|>>>
      scope: invalid.deprecated.combinator.css
    - match: '>>|>|\+|~'
      scope: keyword.operator.combinator.css
  commas:
    - match: ","
      scope: punctuation.separator.list.comma.css
  comment-block:
    - match: /\*
      captures:
        0: punctuation.definition.comment.begin.css
      push:
        - meta_scope: comment.block.css
        - match: \*/
          captures:
            0: punctuation.definition.comment.end.css
          pop: true
  escapes:
    - match: '\\[0-9a-fA-F]{1,6}'
      scope: constant.character.escape.codepoint.css
    - match: \\$\s*
      push:
        - meta_scope: constant.character.escape.newline.css
        - match: ^(?<!\G)
          pop: true
    - match: \\.
      scope: constant.character.escape.css
  feature-query:
    - match: \(
      captures:
        0: punctuation.definition.condition.begin.bracket.round.css
      push:
        - meta_scope: meta.feature-query.css
        - match: \)
          captures:
            0: punctuation.definition.condition.end.bracket.round.css
          pop: true
        - include: feature-query-operators
        - include: feature-query
  feature-query-operators:
    - match: '(?i)(?<=[\s()]|^|\*/)(and|not|or)(?=[\s()]|/\*|$)'
      scope: keyword.operator.logical.feature.$1.css
    - include: rule-list-innards
  font-features:
    - match: |-
        (?xi)
        ((@)(annotation|character-variant|ornaments|styleset|stylistic|swash))
        (?=[\s@'"{;]|/\*|$)
      captures:
        1: "keyword.control.at-rule.${3:/downcase}.css"
        2: punctuation.definition.keyword.css
      push:
        - meta_scope: "meta.at-rule.${3:/downcase}.css"
        - match: "(?<=})"
          pop: true
        - match: "{"
          captures:
            0: punctuation.section.property-list.begin.bracket.curly.css
          push:
            - meta_scope: meta.property-list.font-feature.css
            - match: "}"
              captures:
                0: punctuation.section.property-list.end.bracket.curly.css
              pop: true
            - match: |-
                (?x)
                (?: [-a-zA-Z_]    | [^\x00-\x7F] )   # First letter
                (?: [-a-zA-Z0-9_] | [^\x00-\x7F]     # Remainder of identifier
                  | \\(?:[0-9a-fA-F]{1,6}|.)
                )*
              scope: variable.font-feature.css
              captures:
            - include: rule-list-innards
  functional-pseudo-classes:
    - match: (?i)((:)dir)(\()
      captures:
        1: entity.other.attribute-name.pseudo-class.css
        2: punctuation.definition.entity.css
        3: punctuation.section.function.begin.bracket.round.css
      push:
        - match: \)
          captures:
            0: punctuation.section.function.end.bracket.round.css
          pop: true
        - include: comment-block
        - include: escapes
        - match: '(?i)(?<![\w-])(ltr|rtl)(?![\w-])'
          scope: support.constant.text-direction.css
        - include: property-values
    - match: (?i)((:)lang)(\()
      captures:
        1: entity.other.attribute-name.pseudo-class.css
        2: punctuation.definition.entity.css
        3: punctuation.section.function.begin.bracket.round.css
      push:
        - match: \)
          captures:
            0: punctuation.section.function.end.bracket.round.css
          pop: true
        - match: '(?<=[(,\s])[a-zA-Z]+(-[a-zA-Z0-9]*|\\(?:[0-9a-fA-F]{1,6}|.))*(?=[),\s])'
          scope: support.constant.language-range.css
        - match: '"'
          captures:
            0: punctuation.definition.string.begin.css
          push:
            - meta_scope: string.quoted.double.css
            - match: '"'
              captures:
                0: punctuation.definition.string.end.css
              pop: true
            - include: escapes
            - match: '(?<=["\s])[a-zA-Z*]+(-[a-zA-Z0-9*]*)*(?=["\s])'
              scope: support.constant.language-range.css
        - match: "'"
          captures:
            0: punctuation.definition.string.begin.css
          push:
            - meta_scope: string.quoted.single.css
            - match: "'"
              captures:
                0: punctuation.definition.string.end.css
              pop: true
            - include: escapes
            - match: '(?<=[''\s])[a-zA-Z*]+(-[a-zA-Z0-9*]*)*(?=[''\s])'
              scope: support.constant.language-range.css
        - include: commas
    - match: (?i)((:)(?:not|has|matches))(\()
      captures:
        1: entity.other.attribute-name.pseudo-class.css
        2: punctuation.definition.entity.css
        3: punctuation.section.function.begin.bracket.round.css
      push:
        - match: \)
          captures:
            0: punctuation.section.function.end.bracket.round.css
          pop: true
        - include: selector-innards
    - match: (?i)((:)nth-(?:last-)?(?:child|of-type))(\()
      captures:
        1: entity.other.attribute-name.pseudo-class.css
        2: punctuation.definition.entity.css
        3: punctuation.section.function.begin.bracket.round.css
      push:
        - match: \)
          captures:
            0: punctuation.section.function.end.bracket.round.css
          pop: true
        - match: '(?i)[+-]?(\d+n?|n)(\s*[+-]\s*\d+)?'
          scope: constant.numeric.css
        - match: (?i)even|odd
          scope: support.constant.parity.css
  functions:
    - match: '(?i)(?<![\w-])(calc)(\()'
      captures:
        1: support.function.calc.css
        2: punctuation.section.function.begin.bracket.round.css
      push:
        - meta_scope: meta.function.calc.css
        - match: \)
          captures:
            0: punctuation.section.function.end.bracket.round.css
          pop: true
        - match: '[*/]|(?<=\s|^)[-+](?=\s|$)'
          scope: keyword.operator.arithmetic.css
        - include: property-values
    - match: '(?i)(?<![\w-])(rgba?|hsla?)(\()'
      captures:
        1: support.function.misc.css
        2: punctuation.section.function.begin.bracket.round.css
      push:
        - meta_scope: meta.function.color.css
        - match: \)
          captures:
            0: punctuation.section.function.end.bracket.round.css
          pop: true
        - include: property-values
    - match: |-
        (?xi) (?<![\w-])
        (
          (?:-webkit-|-moz-|-o-)?    # Accept prefixed/historical variants
          (?:repeating-)?            # "Repeating"-type gradient
          (?:linear|radial|conic)    # Shape
          -gradient
        )
        (\()
      captures:
        1: support.function.gradient.css
        2: punctuation.section.function.begin.bracket.round.css
      push:
        - meta_scope: meta.function.gradient.css
        - match: \)
          captures:
            0: punctuation.section.function.end.bracket.round.css
          pop: true
        - match: '(?i)(?<![\w-])(from|to|at)(?![\w-])'
          scope: keyword.operator.gradient.css
        - include: property-values
    - match: '(?i)(?<![\w-])(-webkit-gradient)(\()'
      captures:
        1: invalid.deprecated.gradient.function.css
        2: punctuation.section.function.begin.bracket.round.css
      push:
        - meta_scope: meta.function.gradient.invalid.deprecated.gradient.css
        - match: \)
          captures:
            0: punctuation.section.function.end.bracket.round.css
          pop: true
        - match: '(?i)(?<![\w-])(from|to|color-stop)(\()'
          captures:
            1: invalid.deprecated.function.css
            2: punctuation.section.function.begin.bracket.round.css
          push:
            - match: \)
              captures:
                0: punctuation.section.function.end.bracket.round.css
              pop: true
            - include: property-values
        - include: property-values
    - match: |-
        (?xi) (?<![\w-])
        (annotation|attr|blur|brightness|character-variant|contrast|counters?
        |cross-fade|drop-shadow|element|fit-content|format|grayscale|hue-rotate
        |image-set|invert|local|minmax|opacity|ornaments|repeat|saturate|sepia
        |styleset|stylistic|swash|symbols)
        (\()
      captures:
        1: support.function.misc.css
        2: punctuation.section.function.begin.bracket.round.css
      push:
        - meta_scope: meta.function.misc.css
        - match: \)
          captures:
            0: punctuation.section.function.end.bracket.round.css
          pop: true
        - match: '(?i)(?<=[,\s"]|\*/|^)\d+x(?=[\s,"'')]|/\*|$)'
          scope: constant.numeric.other.density.css
        - include: property-values
        - match: '[^''"),\s]+'
          scope: variable.parameter.misc.css
    - match: '(?i)(?<![\w-])(circle|ellipse|inset|polygon|rect)(\()'
      captures:
        1: support.function.shape.css
        2: punctuation.section.function.begin.bracket.round.css
      push:
        - meta_scope: meta.function.shape.css
        - match: \)
          captures:
            0: punctuation.section.function.end.bracket.round.css
          pop: true
        - match: (?i)(?<=\s|^|\*/)(at|round)(?=\s|/\*|$)
          scope: keyword.operator.shape.css
        - include: property-values
    - match: '(?i)(?<![\w-])(cubic-bezier|steps)(\()'
      captures:
        1: support.function.timing-function.css
        2: punctuation.section.function.begin.bracket.round.css
      push:
        - meta_scope: meta.function.timing-function.css
        - match: \)
          captures:
            0: punctuation.section.function.end.bracket.round.css
          pop: true
        - match: '(?i)(?<![\w-])(start|end)(?=\s*\)|$)'
          scope: support.constant.step-direction.css
        - include: property-values
    - match: |-
        (?xi) (?<![\w-])
        ( (?:translate|scale|rotate)(?:[XYZ]|3D)?
        | matrix(?:3D)?
        | skew[XY]?
        | perspective
        )
        (\()
      captures:
        1: support.function.transform.css
        2: punctuation.section.function.begin.bracket.round.css
      push:
        - match: \)
          captures:
            0: punctuation.section.function.end.bracket.round.css
          pop: true
        - include: property-values
    - include: url
    - match: '(?i)(?<![\w-])(var)(\()'
      captures:
        1: support.function.misc.css
        2: punctuation.section.function.begin.bracket.round.css
      push:
        - meta_scope: meta.function.variable.css
        - match: \)
          captures:
            0: punctuation.section.function.end.bracket.round.css
          pop: true
        - match: |-
            (?x)
            --
            (?:[-a-zA-Z_]    | [^\x00-\x7F])     # First letter
            (?:[-a-zA-Z0-9_] | [^\x00-\x7F]      # Remainder of identifier
              |\\(?:[0-9a-fA-F]{1,6}|.)
            )*
          scope: variable.argument.css
        - include: property-values
  media-feature-keywords:
    - match: |-
        (?xi)
        (?<=^|\s|:|\*/)
        (?: portrait                  # Orientation
          | landscape
          | progressive               # Scan types
          | interlace
          | fullscreen                # Display modes
          | standalone
          | minimal-ui
          | browser
        )
        (?=\s|\)|$)
      scope: support.constant.property-value.css
  media-features:
    - match: |-
        (?xi)
        (?<=^|\s|\(|\*/)           # Preceded by whitespace, bracket or comment
        (?:
          # Standardised features
          (
            (?:min-|max-)?            # Range features
            (?: height
              | width
              | aspect-ratio
              | color
              | color-index
              | monochrome
              | resolution
            )
            | grid                    # Discrete features
            | scan
            | orientation
            | display-mode
          )
          |
          # Deprecated features
          (
            (?:min-|max-)?            # Deprecated in Media Queries 4
            device-
            (?: height
              | width
              | aspect-ratio
            )
          )
          |
          # Vendor extensions
          (
            (?:
              # Spec-compliant syntax
              [-_]
              (?: webkit              # Webkit/Blink
                | apple|khtml         # Webkit aliases
                | epub                # ePub3
                | moz                 # Gecko
                | ms                  # Microsoft
                | o                   # Presto (pre-Opera 15)
                | xv|ah|rim|atsc|     # Less common vendors
                  hp|tc|wap|ro
              )
              |
              # Non-standard prefixes
              (?: mso                 # Microsoft Office
                | prince              # YesLogic
              )
            )
            -
            [\w-]+                   # Feature name
            (?=                       # Terminates correctly
              \s*                    # Possible whitespace
              (?:                     # Possible injected comment
                /\*
                (?:[^*]|\*[^/])*
                \*/
              )?
              \s*
              [:)]                    # Ends with a colon or closed bracket
            )
          )
        )
        (?=\s|$|[><:=]|\)|/\*)     # Terminates cleanly
      captures:
        1: support.type.property-name.media.css
        2: support.type.property-name.media.css
        3: support.type.vendored.property-name.media.css
  media-query:
    - match: \G
      push:
        - match: '(?=\s*[{;])'
          pop: true
        - include: comment-block
        - include: escapes
        - include: media-types
        - match: '(?i)(?<=\s|^|,|\*/)(only|not)(?=\s|{|/\*|$)'
          scope: keyword.operator.logical.$1.media.css
        - match: (?i)(?<=\s|^|\*/|\))and(?=\s|/\*|$)
          scope: keyword.operator.logical.and.media.css
        - match: ',(?:(?:\s*,)+|(?=\s*[;){]))'
          scope: invalid.illegal.comma.css
        - include: commas
        - match: \(
          captures:
            0: punctuation.definition.parameters.begin.bracket.round.css
          push:
            - match: \)
              captures:
                0: punctuation.definition.parameters.end.bracket.round.css
              pop: true
            - include: media-features
            - include: media-feature-keywords
            - match: ":"
              scope: punctuation.separator.key-value.css
            - match: ">=|<=|=|<|>"
              scope: keyword.operator.comparison.css
            - match: (\d+)\s*(/)\s*(\d+)
              scope: meta.ratio.css
              captures:
                1: constant.numeric.css
                2: keyword.operator.arithmetic.css
                3: constant.numeric.css
            - include: numeric-values
            - include: comment-block
  media-query-list:
    - match: '(?=\s*[^{;])'
      push:
        - match: '(?=\s*[{;])'
          pop: true
        - include: media-query
  media-types:
    - match: |-
        (?xi)
        (?<=^|\s|,|\*/)
        (?:
          # Valid media types
          (all|print|screen|speech)
          |
          # Deprecated in Media Queries 4: http://dev.w3.org/csswg/mediaqueries/#media-types
          (aural|braille|embossed|handheld|projection|tty|tv)
        )
        (?=$|[{,\s;]|/\*)
      captures:
        1: support.constant.media.css
        2: invalid.deprecated.constant.media.css
  numeric-values:
    - match: '(#)(?:[0-9a-fA-F]{3,4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})\b'
      scope: constant.other.color.rgb-value.hex.css
      captures:
        1: punctuation.definition.constant.css
    - match: |-
        (?xi) (?<![\w-])
        [-+]?                               # Sign indicator

        (?:                                 # Numerals
            [0-9]+ (?:\.[0-9]+)?           # Integer/float with leading digits
          | \.[0-9]+                       # Float without leading digits
        )

        (?:                                 # Scientific notation
          (?<=[0-9])                        # Exponent must follow a digit
          E                                 # Exponent indicator
          [-+]?                             # Possible sign indicator
          [0-9]+                            # Exponent value
        )?

        (?:                                 # Possible unit for data-type:
          (%)                               # - Percentage
          | ( deg|grad|rad|turn             # - Angle
            | Hz|kHz                        # - Frequency
            | ch|cm|em|ex|fr|in|mm|mozmm|   # - Length
              pc|pt|px|q|rem|vh|vmax|vmin|
              vw
            | dpi|dpcm|dppx                 # - Resolution
            | s|ms                          # - Time
            )
          \b                               # Boundary checking intentionally lax to
        )?                                  # facilitate embedding in CSS-like grammars
      scope: constant.numeric.css
      captures:
        1: keyword.other.unit.percentage.css
        2: "keyword.other.unit.${2:/downcase}.css"
  property-keywords:
    - match: |-
        (?xi) (?<![\w-])
        (above|absolute|active|add|additive|after-edge|alias|all|all-petite-caps|all-scroll|all-small-caps|alpha|alphabetic|alternate|alternate-reverse
        |always|antialiased|auto|auto-pos|available|avoid|avoid-column|avoid-page|avoid-region|backwards|balance|baseline|before-edge|below|bevel
        |bidi-override|blink|block|block-axis|block-start|block-end|bold|bolder|border|border-box|both|bottom|bottom-outside|break-all|break-word|bullets
        |butt|capitalize|caption|cell|center|central|char|circle|clip|clone|close-quote|closest-corner|closest-side|col-resize|collapse|color|color-burn
        |color-dodge|column|column-reverse|common-ligatures|compact|condensed|contain|content|content-box|contents|context-menu|contextual|copy|cover
        |crisp-edges|crispEdges|crosshair|cyclic|darken|dashed|decimal|default|dense|diagonal-fractions|difference|digits|disabled|disc|discretionary-ligatures
        |distribute|distribute-all-lines|distribute-letter|distribute-space|dot|dotted|double|double-circle|downleft|downright|e-resize|each-line|ease|ease-in
        |ease-in-out|ease-out|economy|ellipse|ellipsis|embed|end|evenodd|ew-resize|exact|exclude|exclusion|expanded|extends|extra-condensed|extra-expanded
        |fallback|farthest-corner|farthest-side|fill|fill-available|fill-box|filled|fit-content|fixed|flat|flex|flex-end|flex-start|flip|forwards|freeze
        |from-image|full-width|geometricPrecision|georgian|grab|grabbing|grayscale|grid|groove|hand|hanging|hard-light|help|hidden|hide
        |historical-forms|historical-ligatures|horizontal|horizontal-tb|hue|icon|ideograph-alpha|ideograph-numeric|ideograph-parenthesis|ideograph-space
        |ideographic|inactive|infinite|inherit|initial|inline|inline-axis|inline-block|inline-end|inline-flex|inline-grid|inline-list-item|inline-start
        |inline-table|inset|inside|inter-character|inter-ideograph|inter-word|intersect|invert|isolate|isolate-override|italic|jis04|jis78|jis83
        |jis90|justify|justify-all|kannada|keep-all|landscape|large|larger|left|lighten|lighter|line|line-edge|line-through|linear|linearRGB
        |lining-nums|list-item|local|loose|lowercase|lr|lr-tb|ltr|luminance|luminosity|main-size|mandatory|manipulation|manual|margin-box|match-parent
        |match-source|mathematical|max-content|medium|menu|message-box|middle|min-content|miter|mixed|move|multiply|n-resize|narrower|ne-resize
        |nearest-neighbor|nesw-resize|newspaper|no-change|no-clip|no-close-quote|no-common-ligatures|no-contextual|no-discretionary-ligatures
        |no-drop|no-historical-ligatures|no-open-quote|no-repeat|none|nonzero|normal|not-allowed|nowrap|ns-resize|numbers|numeric|nw-resize|nwse-resize
        |oblique|oldstyle-nums|open|open-quote|optimizeLegibility|optimizeQuality|optimizeSpeed|optional|ordinal|outset|outside|over|overlay|overline|padding
        |padding-box|page|painted|pan-down|pan-left|pan-right|pan-up|pan-x|pan-y|paused|petite-caps|pixelated|plaintext|pointer|portrait|pre|pre-line
        |pre-wrap|preserve-3d|progress|progressive|proportional-nums|proportional-width|proximity|radial|recto|region|relative|remove|repeat|repeat-[xy]
        |reset-size|reverse|revert|ridge|right|rl|rl-tb|round|row|row-resize|row-reverse|row-severse|rtl|ruby|ruby-base|ruby-base-container|ruby-text
        |ruby-text-container|run-in|running|s-resize|saturation|scale-down|screen|scroll|scroll-position|se-resize|semi-condensed|semi-expanded|separate
        |sesame|show|sideways|sideways-left|sideways-lr|sideways-right|sideways-rl|simplified|slashed-zero|slice|small|small-caps|small-caption|smaller
        |smooth|soft-light|solid|space|space-around|space-between|space-evenly|spell-out|square|sRGB|stacked-fractions|start|static|status-bar|swap
        |step-end|step-start|sticky|stretch|strict|stroke|stroke-box|style|sub|subgrid|subpixel-antialiased|subtract|super|sw-resize|symbolic|table
        |table-caption|table-cell|table-column|table-column-group|table-footer-group|table-header-group|table-row|table-row-group|tabular-nums|tb|tb-rl
        |text|text-after-edge|text-before-edge|text-bottom|text-top|thick|thin|titling-caps|top|top-outside|touch|traditional|transparent|triangle
        |ultra-condensed|ultra-expanded|under|underline|unicase|unset|upleft|uppercase|upright|use-glyph-orientation|use-script|verso|vertical
        |vertical-ideographic|vertical-lr|vertical-rl|vertical-text|view-box|visible|visibleFill|visiblePainted|visibleStroke|w-resize|wait|wavy
        |weight|whitespace|wider|words|wrap|wrap-reverse|x-large|x-small|xx-large|xx-small|zero|zoom-in|zoom-out)
        (?![\w-])
      scope: support.constant.property-value.css
    - match: |-
        (?xi) (?<![\w-])
        (arabic-indic|armenian|bengali|cambodian|circle|cjk-decimal|cjk-earthly-branch|cjk-heavenly-stem|cjk-ideographic
        |decimal|decimal-leading-zero|devanagari|disc|disclosure-closed|disclosure-open|ethiopic-halehame-am
        |ethiopic-halehame-ti-e[rt]|ethiopic-numeric|georgian|gujarati|gurmukhi|hangul|hangul-consonant|hebrew
        |hiragana|hiragana-iroha|japanese-formal|japanese-informal|kannada|katakana|katakana-iroha|khmer
        |korean-hangul-formal|korean-hanja-formal|korean-hanja-informal|lao|lower-alpha|lower-armenian|lower-greek
        |lower-latin|lower-roman|malayalam|mongolian|myanmar|oriya|persian|simp-chinese-formal|simp-chinese-informal
        |square|tamil|telugu|thai|tibetan|trad-chinese-formal|trad-chinese-informal|upper-alpha|upper-armenian
        |upper-latin|upper-roman|urdu)
        (?![\w-])
      scope: support.constant.property-value.list-style-type.css
    - match: '(?<![\w-])(?i:-(?:ah|apple|atsc|epub|hp|khtml|moz|ms|o|rim|ro|tc|wap|webkit|xv)|(?:mso|prince))-[a-zA-Z-]+'
      scope: support.constant.vendored.property-value.css
    - match: '(?<![\w-])(?i:arial|century|comic|courier|garamond|georgia|helvetica|impact|lucida|symbol|system|tahoma|times|trebuchet|utopia|verdana|webdings|sans-serif|serif|monospace)(?![\w-])'
      scope: support.constant.font-name.css
  property-names:
    - match: |-
        (?xi) (?<![\w-])
        (?:
            # Standard CSS
            additive-symbols|align-content|align-items|align-self|all|animation|animation-delay|animation-direction
          | animation-duration|animation-fill-mode|animation-iteration-count|animation-name|animation-play-state
          | animation-timing-function|backface-visibility|background|background-attachment|background-blend-mode
          | background-clip|background-color|background-image|background-origin|background-position|background-position-[xy]
          | background-repeat|background-size|block-size|border|border-block-end|border-block-end-color|border-block-end-style
          | border-block-end-width|border-block-start|border-block-start-color|border-block-start-style
          | border-block-start-width|border-bottom|border-bottom-color|border-bottom-left-radius|border-bottom-right-radius
          | border-bottom-style|border-bottom-width|border-collapse|border-color|border-image|border-image-outset
          | border-image-repeat|border-image-slice|border-image-source|border-image-width|border-inline-end
          | border-inline-end-color|border-inline-end-style|border-inline-end-width|border-inline-start
          | border-inline-start-color|border-inline-start-style|border-inline-start-width|border-left|border-left-color
          | border-left-style|border-left-width|border-radius|border-right|border-right-color|border-right-style
          | border-right-width|border-spacing|border-style|border-top|border-top-color|border-top-left-radius
          | border-top-right-radius|border-top-style|border-top-width|border-width|bottom|box-decoration-break
          | box-shadow|box-sizing|break-after|break-before|break-inside|caption-side|clear|clip|clip-path|color
          | column-count|column-fill|column-gap|column-rule|column-rule-color|column-rule-style|column-rule-width
          | column-span|column-width|columns|content|counter-increment|counter-reset|cursor|direction|display
          | empty-cells|filter|flex|flex-basis|flex-direction|flex-flow|flex-grow|flex-shrink|flex-wrap|float
          | font|font-display|font-family|font-feature-settings|font-kerning|font-language-override|font-size|font-size-adjust
          | font-stretch|font-style|font-synthesis|font-variant|font-variant-alternates|font-variant-caps
          | font-variant-east-asian|font-variant-ligatures|font-variant-numeric|font-variant-position|font-weight
          | grid|grid-area|grid-auto-columns|grid-auto-flow|grid-auto-rows|grid-column|grid-column-end|grid-column-gap
          | grid-column-start|grid-gap|grid-row|grid-row-end|grid-row-gap|grid-row-start|grid-template|grid-template-areas
          | grid-template-columns|grid-template-rows|height|hyphens|image-orientation|image-rendering|image-resolution
          | ime-mode|inline-size|isolation|justify-content|left|letter-spacing|line-break|line-height|list-style
          | list-style-image|list-style-position|list-style-type|margin|margin-block-end|margin-block-start|margin-bottom
          | margin-inline-end|margin-inline-start|margin-left|margin-right|margin-top|mask|mask-clip|mask-composite
          | mask-image|mask-mode|mask-origin|mask-position|mask-repeat|mask-size|mask-type|max-block-size|max-height
          | max-inline-size|max-width|max-zoom|min-block-size|min-height|min-inline-size|min-width|min-zoom|mix-blend-mode
          | negative|object-fit|object-position|offset-block-end|offset-block-start|offset-inline-end|offset-inline-start
          | opacity|order|orientation|orphans|outline|outline-color|outline-offset|outline-style|outline-width|overflow
          | overflow-wrap|overflow-[xy]|pad|padding|padding-block-end|padding-block-start|padding-bottom|padding-inline-end
          | padding-inline-start|padding-left|padding-right|padding-top|page-break-after|page-break-before|page-break-inside
          | perspective|perspective-origin|place-content|place-items|place-self|pointer-events|position|prefix|quotes|range
          | resize|right|row-gap|ruby-align|ruby-merge|ruby-position|scroll-behavior|scroll-snap-coordinate
          | scroll-snap-destination|scroll-snap-type|shape-image-threshold|shape-margin|shape-outside|speak-as|src|suffix
          | symbols|system|tab-size|table-layout|text-align|text-align-last|text-combine-upright|text-decoration
          | text-decoration-color|text-decoration-line|text-decoration-style|text-emphasis|text-emphasis-color
          | text-emphasis-position|text-emphasis-style|text-indent|text-orientation|text-overflow|text-rendering
          | text-shadow|text-transform|text-underline-position|top|touch-action|transform|transform-box
          | transform-origin|transform-style|transition|transition-delay|transition-duration|transition-property
          | transition-timing-function|unicode-bidi|unicode-range|user-zoom|vertical-align|visibility|white-space|widows
          | width|will-change|word-break|word-spacing|word-wrap|writing-mode|z-index|zoom

          # SVG attributes
          | alignment-baseline|baseline-shift|clip-rule|color-interpolation|color-interpolation-filters|color-profile
          | color-rendering|cx|cy|dominant-baseline|enable-background|fill|fill-opacity|fill-rule|flood-color|flood-opacity
          | glyph-orientation-horizontal|glyph-orientation-vertical|height|kerning|lighting-color|marker-end|marker-mid
          | marker-start|r|rx|ry|shape-rendering|stop-color|stop-opacity|stroke|stroke-dasharray|stroke-dashoffset|stroke-linecap
          | stroke-linejoin|stroke-miterlimit|stroke-opacity|stroke-width|text-anchor|width|x|y

          # Not listed on MDN; presumably deprecated
          | adjust|after|align|align-last|alignment|alignment-adjust|appearance|attachment|azimuth|background-break
          | balance|baseline|before|bidi|binding|bookmark|bookmark-label|bookmark-level|bookmark-target|border-length
          | bottom-color|bottom-left-radius|bottom-right-radius|bottom-style|bottom-width|box|box-align|box-direction
          | box-flex|box-flex-group|box-lines|box-ordinal-group|box-orient|box-pack|break|character|collapse|column
          | column-break-after|column-break-before|count|counter|crop|cue|cue-after|cue-before|decoration|decoration-break
          | delay|display-model|display-role|down|drop|drop-initial-after-adjust|drop-initial-after-align|drop-initial-before-adjust
          | drop-initial-before-align|drop-initial-size|drop-initial-value|duration|elevation|emphasis|family|fit|fit-position
          | flex-group|float-offset|gap|grid-columns|grid-rows|hanging-punctuation|header|hyphenate|hyphenate-after|hyphenate-before
          | hyphenate-character|hyphenate-lines|hyphenate-resource|icon|image|increment|indent|index|initial-after-adjust
          | initial-after-align|initial-before-adjust|initial-before-align|initial-size|initial-value|inline-box-align|iteration-count
          | justify|label|left-color|left-style|left-width|length|level|line|line-stacking|line-stacking-ruby|line-stacking-shift
          | line-stacking-strategy|lines|list|mark|mark-after|mark-before|marks|marquee|marquee-direction|marquee-play-count|marquee-speed
          | marquee-style|max|min|model|move-to|name|nav|nav-down|nav-index|nav-left|nav-right|nav-up|new|numeral|offset|ordinal-group
          | orient|origin|overflow-style|overhang|pack|page|page-policy|pause|pause-after|pause-before|phonemes|pitch|pitch-range
          | play-count|play-during|play-state|point|presentation|presentation-level|profile|property|punctuation|punctuation-trim
          | radius|rate|rendering-intent|repeat|replace|reset|resolution|resource|respond-to|rest|rest-after|rest-before|richness
          | right-color|right-style|right-width|role|rotation|rotation-point|rows|ruby|ruby-overhang|ruby-span|rule|rule-color
          | rule-style|rule-width|shadow|size|size-adjust|sizing|space|space-collapse|spacing|span|speak|speak-header|speak-numeral
          | speak-punctuation|speech|speech-rate|speed|stacking|stacking-ruby|stacking-shift|stacking-strategy|stress|stretch
          | string-set|style|style-image|style-position|style-type|target|target-name|target-new|target-position|text|text-height
          | text-justify|text-outline|text-replace|text-wrap|timing-function|top-color|top-left-radius|top-right-radius|top-style
          | top-width|trim|unicode|up|user-select|variant|voice|voice-balance|voice-duration|voice-family|voice-pitch|voice-pitch-range
          | voice-rate|voice-stress|voice-volume|volume|weight|white|white-space-collapse|word|wrap
        )
        (?![\w-])
      scope: support.type.property-name.css
    - match: '(?<![\w-])(?i:-(?:ah|apple|atsc|epub|hp|khtml|moz|ms|o|rim|ro|tc|wap|webkit|xv)|(?:mso|prince))-[a-zA-Z-]+'
      scope: support.type.vendored.property-name.css
  property-values:
    - include: commas
    - include: comment-block
    - include: escapes
    - include: functions
    - include: property-keywords
    - include: unicode-range
    - include: numeric-values
    - include: color-keywords
    - include: string
    - match: '!\s*important(?![\w-])'
      scope: keyword.other.important.css
  pseudo-classes:
    - match: |-
        (?xi)
        (:)(:*)
        (?: active|any-link|checked|default|disabled|empty|enabled|first
          | (?:first|last|only)-(?:child|of-type)|focus|focus-within|fullscreen|host|hover
          | in-range|indeterminate|invalid|left|link|optional|out-of-range
          | read-only|read-write|required|right|root|scope|target|unresolved
          | valid|visited
        )(?![\w-]|\s*[;}])
      scope: entity.other.attribute-name.pseudo-class.css
      captures:
        1: punctuation.definition.entity.css
        2: invalid.illegal.colon.css
  pseudo-elements:
    - match: |-
        (?xi)
        (?:
          (::?)                       # Elements using both : and :: notation
          (?: after
            | before
            | first-letter
            | first-line
            | (?:-(?:ah|apple|atsc|epub|hp|khtml|moz
                    |ms|o|rim|ro|tc|wap|webkit|xv)
                | (?:mso|prince))
              -[a-z-]+
          )
          |
          (::)                        # Double-colon only
          (?: backdrop
            | content
            | grammar-error
            | marker
            | placeholder
            | selection
            | shadow
            | spelling-error
          )
        )
        (?![\w-]|\s*[;}])
      scope: entity.other.attribute-name.pseudo-element.css
      captures:
        1: punctuation.definition.entity.css
        2: punctuation.definition.entity.css
  rule-list:
    - match: "{"
      captures:
        0: punctuation.section.property-list.begin.bracket.curly.css
      push:
        - meta_scope: meta.property-list.css
        - match: "}"
          captures:
            0: punctuation.section.property-list.end.bracket.curly.css
          pop: true
        - include: rule-list-innards
  rule-list-innards:
    - include: comment-block
    - include: escapes
    - include: font-features
    - match: |-
        (?x) (?<![\w-])
        --
        (?:[-a-zA-Z_]    | [^\x00-\x7F])     # First letter
        (?:[-a-zA-Z0-9_] | [^\x00-\x7F]      # Remainder of identifier
          |\\(?:[0-9a-fA-F]{1,6}|.)
        )*
      scope: variable.css
    - match: "(?<![-a-zA-Z])(?=[-a-zA-Z])"
      push:
        - meta_scope: meta.property-name.css
        - match: "$|(?![-a-zA-Z])"
          pop: true
        - include: property-names
    - match: (:)\s*
      captures:
        1: punctuation.separator.key-value.css
      push:
        - meta_content_scope: meta.property-value.css
        - match: '\s*(;)|\s*(?=}|\))'
          captures:
            1: punctuation.terminator.rule.css
          pop: true
        - include: comment-block
        - include: property-values
    - match: ;
      scope: punctuation.terminator.rule.css
  selector:
    - match: |-
        (?x)
        (?=
          (?:\|)?                    # Possible anonymous namespace prefix
          (?:
            [-\[:.*\#a-zA-Z_]       # Valid selector character
            |
            [^\x00-\x7F]            # Which can include non-ASCII symbols
            |
            \\                      # Or an escape sequence
            (?:[0-9a-fA-F]{1,6}|.)
          )
        )
      push:
        - meta_scope: meta.selector.css
        - match: '(?=\s*[/@{)])'
          pop: true
        - include: selector-innards
  selector-innards:
    - include: comment-block
    - include: commas
    - include: escapes
    - include: combinators
    - match: |-
        (?x)
        (?:^|(?<=[\s,(};]))         # Follows whitespace, comma, semicolon, or bracket
        (?!
          [-\w*]+
          \|
          (?!
              [-\[:.*\#a-zA-Z_]    # Make sure there's a selector to match
            | [^\x00-\x7F]
          )
        )
        (
          (?: [-a-zA-Z_]    | [^\x00-\x7F] )   # First letter
          (?: [-a-zA-Z0-9_] | [^\x00-\x7F]     # Remainder of identifier
            | \\(?:[0-9a-fA-F]{1,6}|.)
          )*
          |
          \*     # Universal namespace
        )?
        (\|)     # Namespace separator
      captures:
        1: entity.other.namespace-prefix.css
        2: punctuation.separator.css
    - include: tag-names
    - match: \*
      scope: entity.name.tag.wildcard.css
    - match: |-
        (?x) (?<![@\w-])
        ([.\#])
        # Invalid identifier
        (
          (?:
            # Starts with ASCII digits, with possible hyphen preceding it
            -?[0-9]
            |
            # Consists of a hyphen only
            -                                      # Terminated by either:
            (?= $                                  # - End-of-line
              | [\s,.\#)\[:{>+~|]               # - Followed by another selector
              | /\*                               # - Followed by a block comment
            )
            |
            # Name contains unescaped ASCII symbol
            (?:                                    # Check for acceptable preceding characters
                [-a-zA-Z_0-9]|[^\x00-\x7F]       # - Valid selector character
              | \\(?:[0-9a-fA-F]{1,6}|.)         # - Escape sequence
            )*
            (?:                                    # Invalid punctuation
              [!"'%&(*;<?@^`|\]}]                 # - NOTE: We exempt `)` from the list of checked
              |                                    #   symbols to avoid matching `:not(.invalid)`
              / (?!\*)                            # - Avoid invalidating the start of a comment
            )+
          )
          # Mark remainder of selector invalid
          (?: [-a-zA-Z_0-9]|[^\x00-\x7F]         # - Otherwise valid identifier characters
            | \\(?:[0-9a-fA-F]{1,6}|.)           # - Escape sequence
          )*
        )
      scope: invalid.illegal.bad-identifier.css
      captures:
        1: punctuation.definition.entity.css
    - match: |-
        (?x)
        (\.)                                  # Valid class-name
        (
          (?: [-a-zA-Z_0-9]|[^\x00-\x7F]     # Valid identifier characters
            | \\(?:[0-9a-fA-F]{1,6}|.)       # Escape sequence
          )+
        )                                      # Followed by either:
        (?= $                                  # - End of the line
          | [\s,.\#)\[:{>+~|]               # - Another selector
          | /\*                               # - A block comment
        )
      scope: entity.other.attribute-name.class.css
      captures:
        1: punctuation.definition.entity.css
    - match: |-
        (?x)
        (\#)
        (
          -?
          (?![0-9])
          (?:[-a-zA-Z0-9_]|[^\x00-\x7F]|\\(?:[0-9a-fA-F]{1,6}|.))+
        )
        (?=$|[\s,.\#)\[:{>+~|]|/\*)
      scope: entity.other.attribute-name.id.css
      captures:
        1: punctuation.definition.entity.css
    - match: '\['
      captures:
        0: punctuation.definition.entity.begin.bracket.square.css
      push:
        - meta_scope: meta.attribute-selector.css
        - match: '\]'
          captures:
            0: punctuation.definition.entity.end.bracket.square.css
          pop: true
        - include: comment-block
        - include: string
        - match: '(?<=["''\s]|^|\*/)\s*([iI])\s*(?=[\s\]]|/\*|$)'
          captures:
            1: storage.modifier.ignore-case.css
        - match: '(?x)(?<==)\s*((?!/\*)(?:[^\\"''\s\]]|\\.)+)'
          captures:
            1: string.unquoted.attribute-value.css
        - include: escapes
        - match: "[~|^$*]?="
          scope: keyword.operator.pattern.css
        - match: \|
          scope: punctuation.separator.css
        - match: |-
            (?x)
            # Qualified namespace prefix
            ( -?(?!\d)(?:[\w-]|[^\x00-\x7F]|\\(?:[0-9a-fA-F]{1,6}|.))+
            | \*
            )
            # Lookahead to ensure there's a valid identifier ahead
            (?=
              \| (?!\s|=|$|\])
              (?: -?(?!\d)
               |   [\\\w-]
               |   [^\x00-\x7F]
               )
            )
          captures:
            1: entity.other.namespace-prefix.css
        - match: |-
            (?x)
            (-?(?!\d)(?>[\w-]|[^\x00-\x7F]|\\(?:[0-9a-fA-F]{1,6}|.))+)
            \s*
            (?=[~|^\]$*=]|/\*)
          captures:
            1: entity.other.attribute-name.css
    - include: pseudo-classes
    - include: pseudo-elements
    - include: functional-pseudo-classes
    - match: |-
        (?x) (?<![@\w-])
        (?=            # Custom element names must:
          [a-z]        # - start with a lowercase ASCII letter,
          \w* -       # - contain at least one dash
        )
        (?:
          (?![A-Z])    # No uppercase ASCII letters are allowed
          [\w-]       # Allow any other word character or dash
        )+
        (?![(\w-])
      scope: entity.name.tag.custom.css
  string:
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.css
      push:
        - meta_scope: string.quoted.double.css
        - match: '"|(?<!\\)(?=$|\n)'
          captures:
            0: punctuation.definition.string.end.css
          pop: true
        - match: '(?:\G|^)(?=(?:[^\\"]|\\.)+$)'
          push:
            - meta_scope: invalid.illegal.unclosed.string.css
            - match: $
              pop: true
            - include: escapes
        - include: escapes
    - match: "'"
      captures:
        0: punctuation.definition.string.begin.css
      push:
        - meta_scope: string.quoted.single.css
        - match: '''|(?<!\\)(?=$|\n)'
          captures:
            0: punctuation.definition.string.end.css
          pop: true
        - match: '(?:\G|^)(?=(?:[^\\'']|\\.)+$)'
          push:
            - meta_scope: invalid.illegal.unclosed.string.css
            - match: $
              pop: true
            - include: escapes
        - include: escapes
  tag-names:
    - match: |-
        (?xi) (?<![\w:-])
        (?:
            # HTML
            a|abbr|acronym|address|applet|area|article|aside|audio|b|base|basefont|bdi|bdo|bgsound
          | big|blink|blockquote|body|br|button|canvas|caption|center|cite|code|col|colgroup|command
          | content|data|datalist|dd|del|details|dfn|dialog|dir|div|dl|dt|element|em|embed|fieldset
          | figcaption|figure|font|footer|form|frame|frameset|h[1-6]|head|header|hgroup|hr|html|i
          | iframe|image|img|input|ins|isindex|kbd|keygen|label|legend|li|link|listing|main|map|mark
          | marquee|math|menu|menuitem|meta|meter|multicol|nav|nextid|nobr|noembed|noframes|noscript
          | object|ol|optgroup|option|output|p|param|picture|plaintext|pre|progress|q|rb|rp|rt|rtc
          | ruby|s|samp|script|section|select|shadow|slot|small|source|spacer|span|strike|strong
          | style|sub|summary|sup|table|tbody|td|template|textarea|tfoot|th|thead|time|title|tr
          | track|tt|u|ul|var|video|wbr|xmp

          # SVG
          | altGlyph|altGlyphDef|altGlyphItem|animate|animateColor|animateMotion|animateTransform
          | circle|clipPath|color-profile|cursor|defs|desc|discard|ellipse|feBlend|feColorMatrix
          | feComponentTransfer|feComposite|feConvolveMatrix|feDiffuseLighting|feDisplacementMap
          | feDistantLight|feDropShadow|feFlood|feFuncA|feFuncB|feFuncG|feFuncR|feGaussianBlur
          | feImage|feMerge|feMergeNode|feMorphology|feOffset|fePointLight|feSpecularLighting
          | feSpotLight|feTile|feTurbulence|filter|font-face|font-face-format|font-face-name
          | font-face-src|font-face-uri|foreignObject|g|glyph|glyphRef|hatch|hatchpath|hkern
          | line|linearGradient|marker|mask|mesh|meshgradient|meshpatch|meshrow|metadata
          | missing-glyph|mpath|path|pattern|polygon|polyline|radialGradient|rect|set|solidcolor
          | stop|svg|switch|symbol|text|textPath|tref|tspan|use|view|vkern

          # MathML
          | annotation|annotation-xml|maction|maligngroup|malignmark|math|menclose|merror|mfenced
          | mfrac|mglyph|mi|mlabeledtr|mlongdiv|mmultiscripts|mn|mo|mover|mpadded|mphantom|mroot
          | mrow|ms|mscarries|mscarry|msgroup|msline|mspace|msqrt|msrow|mstack|mstyle|msub|msubsup
          | msup|mtable|mtd|mtext|mtr|munder|munderover|semantics
        )
        (?=[+~>\s,.\#|){:\[]|/\*|$)
      scope: entity.name.tag.css
  unicode-range:
    - match: '(?<![\w-])[Uu]\+[0-9A-Fa-f?]{1,6}(?:(-)[0-9A-Fa-f]{1,6})?(?![\w-])'
      captures:
        0: constant.other.unicode-range.css
        1: punctuation.separator.dash.unicode-range.css
  url:
    - match: '(?i)(?<![\w@-])(url)(\()'
      captures:
        1: support.function.url.css
        2: punctuation.section.function.begin.bracket.round.css
      push:
        - meta_scope: meta.function.url.css
        - match: \)
          captures:
            0: punctuation.section.function.end.bracket.round.css
          pop: true
        - match: '[^''")\s]+'
          scope: variable.parameter.url.css
        - include: string
        - include: comment-block
        - include: escapes
