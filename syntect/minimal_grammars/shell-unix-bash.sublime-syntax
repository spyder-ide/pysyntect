%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Shell Script
file_extensions:
  - sh
  - bash
  - ksh
  - zsh
  - zsh-theme
  - zshenv
  - zlogin
  - zlogout
  - zprofile
  - zshrc
  - bashrc
  - bash_aliases
  - bash_profile
  - bash_login
  - profile
  - bash_logout
  - .textmate_init
  - npmrc
  - PKGBUILD
  - install
  - cygport
  - bats
  - ebuild
first_line_match: |-
  (?x)
  	# Hashbang
  	^\#!.*(?:\s|\/)
  	  (?:bash|zsh|sh|tcsh|ksh|dash|ash|csh|rc)
  	(?:$|\s)
  	|
  	# Modeline
  	(?i:
  	  # Emacs
  	  -\*-(?:\s*(?=[^:;\s]+\s*-\*-)|(?:.*?[;\s]|(?<=-\*-))mode\s*:\s*)
  	    (?:shell-script|sh)
  	  (?=[\s;]|(?<![-*])-\*-).*?-\*-
  	  |
  	  # Vim
  	  (?:(?:\s|^)vi(?:m[<=>]?\d+|m)?|\sex)(?=:(?=\s*set?\s[^\n:]+:)|:(?!\s* set?\s))(?:(?:\s|\s*:\s*)\w*(?:\s*=(?:[^\n\\\s]|\\.)*)?)*[\s:](?:filetype|ft|syntax)\s*=
  	    sh
  	  (?=\s|:|$)
  	)
scope: source.shell
contexts:
  main:
    - include: comment
    - include: pipeline
    - include: list
    - include: compound-command
    - include: loop
    - include: string
    - include: function-definition
    - include: variable
    - include: interpolation
    - include: heredoc
    - include: herestring
    - include: redirection
    - include: pathname
    - include: keyword
    - include: support
  comment:
    - match: '(^\s+)?(?<=^|\W)(?<!-)(?=#)(?!#{)'
      captures:
        1: punctuation.whitespace.comment.leading.shell
      push:
        - match: (?!\G)
          pop: true
        - match: "#!"
          captures:
            0: punctuation.definition.comment.shebang.shell
          push:
            - meta_scope: comment.line.number-sign.shebang.shell
            - match: $
              pop: true
        - match: "#"
          captures:
            0: punctuation.definition.comment.shell
          push:
            - meta_scope: comment.line.number-sign.shell
            - match: $
              pop: true
  case-clause:
    - match: (?=\S)
      push:
        - meta_scope: meta.scope.case-clause.shell
        - match: ;;
          captures:
            0: punctuation.terminator.case-clause.shell
          pop: true
        - match: \(|(?=\S)
          captures:
            0: punctuation.definition.case-pattern.shell
          push:
            - meta_scope: meta.scope.case-pattern.shell
            - match: \)
              captures:
                0: punctuation.definition.case-pattern.shell
              pop: true
            - match: \|
              scope: punctuation.separator.pipe-sign.shell
            - include: string
            - include: variable
            - include: interpolation
            - include: pathname
        - match: (?<=\))
          push:
            - meta_scope: meta.scope.case-clause-body.shell
            - match: (?=;;)
              pop: true
            - include: main
  compound-command:
    - match: '\[{1,2}'
      captures:
        0: punctuation.definition.logical-expression.shell
      push:
        - meta_scope: meta.scope.logical-expression.shell
        - match: '\]{1,2}'
          captures:
            0: punctuation.definition.logical-expression.shell
          pop: true
        - include: logical-expression
        - include: main
    - match: '\({2}'
      captures:
        0: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.other.math.shell
        - match: '\){2}'
          captures:
            0: punctuation.definition.string.end.shell
          pop: true
        - include: math
    - match: \(
      captures:
        0: punctuation.definition.subshell.shell
      push:
        - meta_scope: meta.scope.subshell.shell
        - match: \)
          captures:
            0: punctuation.definition.subshell.shell
          pop: true
        - include: main
    - match: '(?<=\s|^){(?=\s|$)'
      captures:
        0: punctuation.definition.group.shell
      push:
        - meta_scope: meta.scope.group.shell
        - match: '(?<=^|;)\s*(})'
          captures:
            1: punctuation.definition.group.shell
          pop: true
        - include: main
  function-definition:
    - match: '(?<=^|;|&|\s)(function)\s+([^\s\\]+)(?:\s*(\(\)))?'
      captures:
        1: storage.type.function.shell
        2: entity.name.function.shell
        3: punctuation.definition.arguments.shell
      push:
        - meta_scope: meta.function.shell
        - match: ;|&|$
          captures:
            0: punctuation.definition.function.shell
          pop: true
        - include: main
    - match: '(?<=^|;|&|\s)([^\s\\=]+)\s*(\(\))'
      captures:
        1: entity.name.function.shell
        2: punctuation.definition.arguments.shell
      push:
        - meta_scope: meta.function.shell
        - match: ;|&|$
          captures:
            0: punctuation.definition.function.shell
          pop: true
        - include: main
  heredoc:
    - match: (<<)-\s*("|'|)\s*(RUBY)(?=\s|;|&|<|"|')\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.no-indent.ruby.shell
        - meta_content_scope: source.ruby.embedded.shell
        - match: ^\t*(RUBY)(?=\s|;|&|$)
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:source.ruby
    - match: (<<)\s*("|'|)\s*(RUBY)(?=\s|;|&|<|"|')\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.ruby.shell
        - meta_content_scope: source.ruby.embedded.shell
        - match: ^(RUBY)(?=\s|;|&|$)
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:source.ruby
    - match: (<<)-\s*("|'|)\s*(PYTHON)(?=\s|;|&|<|"|')\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.no-indent.python.shell
        - meta_content_scope: source.python.embedded.shell
        - match: ^\t*(PYTHON)(?=\s|;|&|$)
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:source.python
    - match: (<<)\s*("|'|)\s*(PYTHON)(?=\s|;|&|<|"|')\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.python.shell
        - meta_content_scope: source.python.embedded.shell
        - match: ^(PYTHON)(?=\s|;|&|$)
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:source.python
    - match: (<<)-\s*("|'|)\s*(APPLESCRIPT)(?=\s|;|&|<|"|')\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.no-indent.applescript.shell
        - meta_content_scope: source.applescript.embedded.shell
        - match: ^\t*(APPLESCRIPT)(?=\s|;|&|$)
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:source.applescript
    - match: (<<)\s*("|'|)\s*(APPLESCRIPT)(?=\s|;|&|<|"|')\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.applescript.shell
        - meta_content_scope: source.applescript.embedded.shell
        - match: ^(APPLESCRIPT)(?=\s|;|&|$)
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:source.applescript
    - match: (<<)-\s*("|'|)\s*(HTML)(?=\s|;|&|<|"|')\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.no-indent.html.shell
        - meta_content_scope: text.html.embedded.shell
        - match: ^\t*(HTML)(?=\s|;|&|$)
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:text.html.basic
    - match: (<<)\s*("|'|)\s*(HTML)(?=\s|;|&|<|"|')\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.html.shell
        - meta_content_scope: text.html.embedded.shell
        - match: ^(HTML)(?=\s|;|&|$)
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:text.html.basic
    - match: (<<)-\s*("|'|)\s*(MARKDOWN)(?=\s|;|&|<|"|')\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.no-indent.markdown.shell
        - meta_content_scope: text.html.markdown.embedded.shell
        - match: ^\t*(MARKDOWN)(?=\s|;|&|$)
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:text.html.markdown
    - match: (<<)\s*("|'|)\s*(MARKDOWN)(?=\s|;|&|<|"|')\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.markdown.shell
        - meta_content_scope: text.html.markdown.embedded.shell
        - match: ^(MARKDOWN)(?=\s|;|&|$)
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:text.html.markdown
    - match: (<<)-\s*("|'|)\s*(TEXTILE)(?=\s|;|&|<|"|')\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.no-indent.textile.shell
        - meta_content_scope: text.html.textile.embedded.shell
        - match: ^\t*(TEXTILE)(?=\s|;|&|$)
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:text.html.textile
    - match: (<<)\s*("|'|)\s*(TEXTILE)(?=\s|;|&|<|"|')\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.textile.shell
        - meta_content_scope: text.html.textile.embedded.shell
        - match: ^(TEXTILE)(?=\s|;|&|$)
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:text.html.textile
    - match: (<<)-\s*("|'|)\s*(SHELL)(?=\s|;|&|<|"|')\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.no-indent.shell.shell
        - meta_content_scope: source.shell.embedded.shell
        - match: ^\t*(\3)(?=\s|;|&|$)
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:source.shell
    - match: (<<)\s*("|'|)\s*(SHELL)(?=\s|;|&|<|"|')\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.shell.shell
        - meta_content_scope: source.shell.embedded.shell
        - match: ^(\3)(?=\s|;|&|$)
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:source.shell
    - match: '(<<)-\s*("|''|)\s*\\?([^;&<\s]+)\2'
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.no-indent.shell
        - match: ^\t*(\3)(?=\s|;|&|$)
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
    - match: '(<<)\s*("|''|)\s*\\?([^;&<\s]+)\2'
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.shell
        - match: ^(\3)(?=\s|;|&|$)
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
  herestring:
    - match: (<<<)\s*(('))
      captures:
        1: keyword.operator.herestring.shell
        2: string.quoted.single.shell
        3: punctuation.definition.string.begin.shell
      push:
        - meta_scope: meta.herestring.shell
        - meta_content_scope: string.quoted.single.shell
        - match: (')
          captures:
            0: string.quoted.single.shell
            1: punctuation.definition.string.end.shell
          pop: true
    - match: (<<<)\s*(("))
      captures:
        1: keyword.operator.herestring.shell
        2: string.quoted.double.shell
        3: punctuation.definition.string.begin.shell
      push:
        - meta_scope: meta.herestring.shell
        - meta_content_scope: string.quoted.double.shell
        - match: (")
          captures:
            0: string.quoted.double.shell
            1: punctuation.definition.string.end.shell
          pop: true
    - match: '(<<<)\s*(([^\s)\\]|\\.)+)'
      scope: meta.herestring.shell
      captures:
        1: keyword.operator.herestring.shell
        2: string.unquoted.herestring.shell
  interpolation:
    - match: '\$\({2}'
      captures:
        0: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.other.math.shell
        - match: '\){2}'
          captures:
            0: punctuation.definition.string.end.shell
          pop: true
        - include: math
    - match: "`"
      captures:
        0: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.interpolated.backtick.shell
        - match: "`"
          captures:
            0: punctuation.definition.string.end.shell
          pop: true
        - match: '\\[`\\$]'
          scope: constant.character.escape.shell
        - match: '(?<=\W)(?=#)(?!#{)'
          captures:
            1: punctuation.whitespace.comment.leading.shell
          push:
            - match: (?!\G)
              pop: true
            - match: "#"
              captures:
                0: punctuation.definition.comment.shell
              push:
                - meta_scope: comment.line.number-sign.shell
                - match: (?=`)
                  pop: true
        - include: main
    - match: \$\(
      captures:
        0: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.interpolated.dollar.shell
        - match: \)
          captures:
            0: punctuation.definition.string.end.shell
          pop: true
        - include: main
  keyword:
    - match: (?<=^|;|&|\s)(then|else|elif|fi|for|in|do|done|select|case|continue|esac|while|until|return)(?=\s|;|&|$)
      scope: keyword.control.shell
    - match: (?<=^|;|&|\s)(?:export|declare|typeset|local|readonly)(?=\s|;|&|$)
      scope: storage.modifier.shell
  list:
    - match: ;|&&|&|\|\|
      scope: keyword.operator.list.shell
  logical-expression:
    - match: '=[=~]?|!=?|<|>|&&|\|\|'
      comment: do we want a special rule for ( expr )?
      scope: keyword.operator.logical.shell
    - match: '(?<!\S)-(nt|ot|ef|eq|ne|l[te]|g[te]|[a-hknoprstuwxzOGLSN])'
      scope: keyword.operator.logical.shell
  loop:
    - match: '(?<=^|;|&|\s)(for)\s+(?=\({2})'
      captures:
        1: keyword.control.shell
      push:
        - meta_scope: meta.scope.for-loop.shell
        - match: (?<=^|;|&|\s)done(?=\s|;|&|$)
          captures:
            0: keyword.control.shell
          pop: true
        - include: main
    - match: (?<=^|;|&|\s)(for)\s+(.+?)\s+(in)(?=\s|;|&|$)
      captures:
        1: keyword.control.shell
        2: variable.other.loop.shell
        3: keyword.control.shell
      push:
        - meta_scope: meta.scope.for-in-loop.shell
        - match: (?<=^|;|&|\s)done(?=\s|;|&|$)
          captures:
            0: keyword.control.shell
          pop: true
        - include: main
    - match: (?<=^|;|&|\s)(while|until)(?=\s|;|&|$)
      captures:
        1: keyword.control.shell
      push:
        - meta_scope: meta.scope.while-loop.shell
        - match: (?<=^|;|&|\s)done(?=\s|;|&|$)
          captures:
            0: keyword.control.shell
          pop: true
        - include: main
    - match: '(?<=^|;|&|\s)(select)\s+((?:[^\s\\]|\\.)+)(?=\s|;|&|$)'
      captures:
        1: keyword.control.shell
        2: variable.other.loop.shell
      push:
        - meta_scope: meta.scope.select-block.shell
        - match: (?<=^|;|&|\s)(done)(?=\s|;|&|$)
          captures:
            1: keyword.control.shell
          pop: true
        - include: main
    - match: (?<=^|;|&|\s)case(?=\s|;|&|$)
      captures:
        0: keyword.control.shell
      push:
        - meta_scope: meta.scope.case-block.shell
        - match: (?<=^|;|&|\s)esac(?=\s|;|&|$)
          captures:
            0: keyword.control.shell
          pop: true
        - match: (?<=^|;|&|\s)in(?=\s|;|&|$)
          captures:
            0: keyword.control.shell
          push:
            - meta_scope: meta.scope.case-body.shell
            - match: (?<=^|;|&|\s)(?=esac(\s|;|&|$))
              pop: true
            - include: comment
            - include: case-clause
            - include: main
        - include: main
    - match: (?<=^|;|&|\s)if(?=\s|;|&|$)
      captures:
        0: keyword.control.shell
      push:
        - meta_scope: meta.scope.if-block.shell
        - match: (?<=^|;|&|\s)fi(?=\s|;|&|$)
          captures:
            0: keyword.control.shell
          pop: true
        - include: main
  math:
    - include: variable
    - match: '\+{1,2}|-{1,2}|!|~|\*{1,2}|/|%|<[<=]?|>[>=]?|==|!=|^|\|{1,2}|&{1,2}|\?|\:|,|=|[*/%+\-&^|]=|<<=|>>='
      scope: keyword.operator.arithmetic.shell
    - match: "0[xX][0-9A-Fa-f]+"
      scope: constant.numeric.hex.shell
    - match: '0\d+'
      scope: constant.numeric.octal.shell
    - match: '\d{1,2}#[0-9a-zA-Z@_]+'
      scope: constant.numeric.other.shell
    - match: \d+
      scope: constant.numeric.integer.shell
  pathname:
    - match: (?<=\s|:|=|^)~
      scope: keyword.operator.tilde.shell
    - match: \*|\?
      scope: keyword.operator.glob.shell
    - match: '([?*+@!])(\()'
      captures:
        1: keyword.operator.extglob.shell
        2: punctuation.definition.extglob.shell
      push:
        - meta_scope: meta.structure.extglob.shell
        - match: \)
          captures:
            0: punctuation.definition.extglob.shell
          pop: true
        - include: main
  pipeline:
    - match: (?<=^|;|&|\s)(time)(?=\s|;|&|$)
      scope: keyword.other.shell
    - match: "[|!]"
      scope: keyword.operator.pipe.shell
  redirection:
    - match: '[><]\('
      captures:
        0: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.interpolated.process-substitution.shell
        - match: \)
          captures:
            0: punctuation.definition.string.end.shell
          pop: true
        - include: main
    - match: '(?<![<>])(&>|\d*>&\d*|\d*(>>|>|<)|\d*<&|\d*<>)(?![<>])'
      scope: keyword.operator.redirect.shell
  string:
    - match: \\.
      scope: constant.character.escape.shell
    - match: "'"
      captures:
        0: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.quoted.single.shell
        - match: "'"
          captures:
            0: punctuation.definition.string.end.shell
          pop: true
    - match: \$?"
      captures:
        0: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.quoted.double.shell
        - match: '"'
          captures:
            0: punctuation.definition.string.end.shell
          pop: true
        - match: '\\[\$`"\\\n]'
          scope: constant.character.escape.shell
        - include: variable
        - include: interpolation
    - match: \$'
      captures:
        0: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.quoted.single.dollar.shell
        - match: "'"
          captures:
            0: punctuation.definition.string.end.shell
          pop: true
        - match: \\(a|b|e|f|n|r|t|v|\\|')
          scope: constant.character.escape.ansi-c.shell
        - match: '\\[0-9]{3}'
          scope: constant.character.escape.octal.shell
        - match: '\\x[0-9a-fA-F]{2}'
          scope: constant.character.escape.hex.shell
        - match: \\c.
          scope: constant.character.escape.control-char.shell
  support:
    - match: (?<=^|;|&|\s)(?::|\.)(?=\s|;|&|$)
      scope: support.function.builtin.shell
    - match: (?<=^|;|&|\s)(?:alias|bg|bind|break|builtin|caller|cd|command|compgen|complete|dirs|disown|echo|enable|eval|exec|exit|false|fc|fg|getopts|hash|help|history|jobs|kill|let|logout|popd|printf|pushd|pwd|read|readonly|set|shift|shopt|source|suspend|test|times|trap|true|type|ulimit|umask|unalias|unset|wait)(?=\s|;|&|$)
      scope: support.function.builtin.shell
  variable:
    - match: '(\$)[a-zA-Z_][a-zA-Z0-9_]*'
      scope: variable.other.normal.shell
      captures:
        1: punctuation.definition.variable.shell
    - match: '(\$)[-*@#?$!0_]'
      scope: variable.other.special.shell
      captures:
        1: punctuation.definition.variable.shell
    - match: '(\$)[1-9]'
      scope: variable.other.positional.shell
      captures:
        1: punctuation.definition.variable.shell
    - match: '\${'
      captures:
        0: punctuation.definition.variable.shell
      push:
        - meta_scope: variable.other.bracket.shell
        - match: "}"
          captures:
            0: punctuation.definition.variable.shell
          pop: true
        - match: '!|:[-=?]?|\*|@|#{1,2}|%{1,2}|/'
          scope: keyword.operator.expansion.shell
        - match: '(\[)([^\]]+)(\])'
          captures:
            1: punctuation.section.array.shell
            3: punctuation.section.array.shell
        - include: variable
        - include: string
